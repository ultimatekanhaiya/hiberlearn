
## initialize root logger with level ERROR for stdout and fout
#log4j.rootLogger=ERROR,stdout,fout
#
## set the log level for these components
#log4j.logger.com.endeca=INFO
#log4j.logger.com.endeca.itl.web.metrics=INFO 
#
## add a ConsoleAppender to the logger stdout to write to the console
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#
## use a simple message format
#log4j.appender.stdout.layout.ConversionPattern=%m%n
## add a FileAppender to the logger fout
#log4j.appender.fout=org.apache.log4j.FileAppender
#
## create a log file
#log4j.appender.fout.File=crawl.log
#log4j.appender.fout.layout=org.apache.log4j.PatternLayout
#
## use a more detailed message pattern
#log4j.appender.fout.layout.ConversionPattern=%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n

#Let break it down :
#
#1. %d{yyyy-MM-dd HH:mm:ss} = Date and time format, refer to SimpleDateFormat JavaDoc.
#2. %-5p = The logging priority, like DEBUG or ERROR. The -5 is optional, for the pretty print format.
#3. %c{1} = The logging name we set via getLogger(), refer to log4j PatternLayout guide.
#4. %L = The line number from where the logging request.
#5. %m%n = The message to log and line break.
   //name=PropertiesConfig
property.filename = logs
appenders = console, file
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n

appender.file.type = File
appender.file.name = File
appender.file.fileName=${filename}/propertieslogs.log
appender.file.layout.type=PatternLayout
appender.file.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n

rootLogger.level = info
rootLogger.appenderRefs = stdout
rootLogger.appenderRef.stdout.ref = STDOUT
rootLogger.appenderRef.file.ref = File

logger.hibernate.name=org.hibernate.SQL
logger.hibernate.name=org.hibernate.orm.jdbc.bind
logger.hibernate.level=trace
